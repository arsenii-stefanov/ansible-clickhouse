#jinja2:lstrip_blocks: True
<?xml version="1.0"?>
<!-- {{ ansible_managed }} -->
<yandex>
    <logger>
        <level>{{ clickhouse_logger['server_log']['level'] }}</level>
        <log>{{ clickhouse_logger['server_log']['log'] }}</log>
        <errorlog>{{ clickhouse_logger['server_log']['errorlog'] }}</errorlog>
        <size>{{ clickhouse_logger['server_log']['size'] }}</size>
        <count>{{ clickhouse_logger['server_log']['count'] }}</count>
    </logger>

{% if clickhouse_ssl['http_interface_ssl_enable'] is defined and clickhouse_ssl['http_interface_ssl_enable'] == true %}
    <https_port>{{ clickhouse_https_port | default(8443) }}</https_port>
{% if ( clickhouse_ssl['http_interface_ssl_only'] is defined and clickhouse_ssl['http_interface_ssl_only'] == false ) or ( clickhouse_ssl['http_interface_ssl_only'] is not defined ) %}
    <http_port>{{ clickhouse_http_port | default(8123) }}</http_port>
{% endif %}
{% else %}
    <http_port>{{ clickhouse_http_port | default(8123) }}</http_port>
{% endif %}

    <!-- Used only with https_port. Full ssl options list: https://github.com/yandex/ClickHouse/blob/master/contrib/libpoco/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
    <openSSL>
        <server>
            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
            <certificateFile>{{ clickhouse_default_ssl_dir }}/{{ clickhouse_node_cert_name }}</certificateFile>
            <privateKeyFile>{{ clickhouse_default_ssl_dir }}/{{ clickhouse_node_key_name }}</privateKeyFile>
            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->
            <dhParamsFile>{{ clickhouse_default_ssl_dir }}/{{ clickhouse_node_dhparam_name }}</dhParamsFile>
            <verificationMode>none</verificationMode>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <caConfig>{{ clickhouse_default_ssl_dir }}/{{ clickhouse_root_ca_cert_name }}</caConfig>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
        </server>
        <client>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
{% if clickhouse_generate_self_signed_ssl is defined and clickhouse_generate_self_signed_ssl == true %}
            <verificationMode>none</verificationMode> 
{% endif %}
            <invalidCertificateHandler>
{% if clickhouse_generate_self_signed_ssl is defined and clickhouse_generate_self_signed_ssl == true %}
                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
                <name>AcceptCertificateHandler</name>
{% else %}
                <name>RejectCertificateHandler</name>
{% endif %}
            </invalidCertificateHandler>
        </client>
    </openSSL>

    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->
    <!--
    <http_server_default_response><![CDATA[<html ng-app="SMI2"><head><base href="http://ui.tabix.io/"></head><body><div ui-view="" class="content-ui"></div><script src="http://loader.tabix.io/master.js"></script></body></html>]]></http_server_default_response>
    -->

{% if ( clickhouse_ssl['native_interface_ssl_enable'] is defined and clickhouse_ssl['native_interface_ssl_enable'] == true ) or ( clickhouse_ssl['distributed_query_ssl_enable'] is defined and clickhouse_ssl['distributed_query_ssl_enable'] == true ) %}
    <tcp_port_secure>{{ clickhouse_tcp_port_secure }}</tcp_port_secure>
{% if ( clickhouse_ssl['native_interface_ssl_only'] is defined and clickhouse_ssl['native_interface_ssl_only'] == false ) or ( clickhouse_ssl['native_interface_ssl_only'] is not defined ) %}
    <tcp_port>{{ clickhouse_tcp_port | default(9000) }}</tcp_port>
{% endif %}
{% else %}
    <tcp_port>{{ clickhouse_tcp_port | default(9000) }}</tcp_port>
{% endif %}


{% if clickhouse_ssl['interserver_repl_ssl_enable'] is defined and clickhouse_ssl['interserver_repl_ssl_enable'] == true %}
    <!--
        NOT DOCUMENTED YET: https://clickhouse.tech/docs/en/interfaces/tcp/
        GITHUB ISSUE: https://github.com/ClickHouse/ClickHouse/issues/12066
        Found in https://github.com/ClickHouse/ClickHouse/blob/master/programs/server/Server.cpp
    -->
    <interserver_https_host>{{ clickhouse_interserver_https_host }}</interserver_https_host>
    <!-- Port for communication between replicas. Used for data exchange. -->
    <interserver_https_port>{{ clickhouse_interserver_https_port | default(9449) }}</interserver_https_port>
{% else %}
    <!-- Hostname that is used by other replicas to request this server.
         If not specified, than it is determined analoguous to 'hostname -f' command.
         This setting could be used to switch replication to another network interface.
      -->
    <!--
    <interserver_http_host>example.yandex.ru</interserver_http_host>
    -->
    {% if clickhouse_interserver_http_host is defined and clickhouse_interserver_http_host != "" %}
    <interserver_http_host>{{ clickhouse_interserver_http_host }}</interserver_http_host>
    {% endif %}
    <!-- Port for communication between replicas. Used for data exchange. -->
    <interserver_http_port>{{ clickhouse_interserver_http_port | default(9009) }}</interserver_http_port>
{% endif %}

{% if interserver_http_auth_enabled is defined and interserver_http_auth_enabled == true %}
<interserver_http_credentials>
    <user>{{ interserver_http_auth_user }}</user>
    <password>{{ interserver_http_auth_password }}</password>
</interserver_http_credentials>
{% endif %}


    <!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. -->
    <!-- <listen_host>::</listen_host> -->
{% for host in clickhouse_listen_host %}
    <listen_host>{{ host }}</listen_host>
{% endfor %}

    <max_connections>{{ clickhouse_server_config['max_connections'] }}</max_connections>
    <keep_alive_timeout>{{ clickhouse_server_config['keep_alive_timeout'] }}</keep_alive_timeout>

    <!-- Maximum number of concurrent queries. -->
    <max_concurrent_queries>{{ clickhouse_server_config['max_concurrent_queries'] }}</max_concurrent_queries>

    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve
         correct maximum value. -->
    <!-- <max_open_files>262144</max_open_files> -->

    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
         Uncompressed cache is advantageous only for very short queries and in rare cases.
      -->
    <uncompressed_cache_size>{{ clickhouse_server_config['uncompressed_cache_size'] }}</uncompressed_cache_size>

    <!-- Approximate size of mark cache, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         You should not lower this value.
      -->
    <mark_cache_size>{{ clickhouse_server_config['mark_cache_size'] }}</mark_cache_size>


    <!-- Path to data directory, with trailing slash. -->
    <path>{{ clickhouse_default_main_dir }}</path>

    <!-- Path to temporary data for processing hard queries. -->
    <tmp_path>{{ clickhouse_default_main_dir }}/tmp</tmp_path>
  
    <user_files_path>{{ clickhouse_default_main_dir }}/user_files</user_files_path>
    <!-- Path to configuration file with users, access rights, profiles of settings, quotas. -->
    <users_config>users.xml</users_config>

    <!-- Default profile of settings.. -->
    <default_profile>default</default_profile>

    <!-- Default database. -->
    <default_database>default</default_database>

    <!-- Server time zone could be set here.

         Time zone is used when converting between String and DateTime types,
          when printing DateTime in text formats and parsing DateTime from text,
          it is used in date and time related functions, if specific time zone was not passed as an argument.

         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.
         If not specified, system time zone at server startup is used.

         Please note, that server could display time zone alias instead of specified name.
         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.
    -->
    <!-- <timezone>Europe/Moscow</timezone> -->

    <!-- You can specify umask here (see "man umask"). Server will apply it on startup.
         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).
    -->
    <!-- <umask>022</umask> -->

    <!-- Configuration of clusters that could be used in Distributed tables.
         https://clickhouse.yandex/reference_en.html#Distributed
      -->
    <remote_servers incl="clickhouse-remote-servers" />


    <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.
         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.
         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.
      -->

    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.
         Optional. If you don't use replicated tables, you could omit that.

         See https://clickhouse.yandex/reference_en.html#Data%20replication
      -->
    <zookeeper incl="zookeeper-servers" optional="true" />

    <!-- Substitutions for parameters of replicated tables.
          Optional. If you don't use replicated tables, you could omit that.

         See https://clickhouse.yandex/reference_en.html#Creating%20replicated%20tables
      -->
    <macros incl="macros" optional="true" />


    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
    <builtin_dictionaries_reload_interval>{{ clickhouse_server_config['builtin_dictionaries_reload_interval'] }}</builtin_dictionaries_reload_interval>


    <!-- Maximum session timeout, in seconds. Default: 3600. -->
    <max_session_timeout>{{ clickhouse_server_config['max_session_timeout'] }}</max_session_timeout>

    <!-- Default session timeout, in seconds. Default: 60. -->
    <default_session_timeout>{{ clickhouse_server_config['default_session_timeout'] }}</default_session_timeout>

{% if clickhouse_monitoring['type'] is defined and clickhouse_monitoring['type'] == "prometheus" %}
    <prometheus>
        <endpoint>{{ clickhouse_monitoring['config_opts']['endpoint'] | default('/metrics') }}</endpoint>
        <port>{{ clickhouse_monitoring['config_opts']['port'] | default(8001) }}</port>
        <metrics>{{ clickhouse_monitoring['config_opts']['metrics'] | default(true) }}</metrics>
        <events>{{ clickhouse_monitoring['config_opts']['events'] | default(true) }}</events>
        <asynchronous_metrics>{{ clickhouse_monitoring['config_opts']['asynchronous_metrics'] | default(true) }}</asynchronous_metrics>
    </prometheus>
{% elif clickhouse_monitoring['type'] is defined and clickhouse_monitoring['type'] == "graphite" %}
    <graphite>
        <host>{{ clickhouse_monitoring['config_opts']['host'] | default('localhost') }}</host>
        <port>{{ clickhouse_monitoring['config_opts']['port'] | default(42000) }}</port>
        <timeout>{{ clickhouse_monitoring['config_opts']['timeout'] | default('0.1') }}</timeout>
        <interval>{{ clickhouse_monitoring['config_opts']['interval'] | default(60) }}</interval>
        <root_path>{{ clickhouse_monitoring['config_opts']['root_path'] | default('one_min') }}</root_path>
        <metrics>{{ clickhouse_monitoring['config_opts']['metrics'] | default('true') }}</metrics>
        <events>{{ clickhouse_monitoring['config_opts']['events'] | default('true') }}</events>
        <events_cumulative>{{ clickhouse_monitoring['config_opts']['events_cumulative'] | default('false') }}</events_cumulative>
        <asynchronous_metrics>{{ clickhouse_monitoring['config_opts']['asynchronous_metrics'] | default('true') }}</asynchronous_metrics>
    </graphite>
{% endif %}

    <!-- Query log. Used only for queries with setting log_queries = 1. -->
    <query_log>
        <!-- What table to insert data. If table is not exist, it will be created.
             When query log structure is changed after system update,
              then old table will be renamed and new table will be created automatically.
        -->
        <database>{{ clickhouse_logger['query_log']['database'] }}</database>
        <table>{{ clickhouse_logger['query_log']['table'] }}</table>
        <partition_by>{{ clickhouse_logger['query_log']['partition_by'] }}</partition_by>
        <!-- Interval of flushing data. -->
        <flush_interval_milliseconds>{{ clickhouse_logger['query_log']['flush_interval_milliseconds'] }}</flush_interval_milliseconds>
    </query_log>


{% if clickhouse_logger['part_log'] is defined and clickhouse_logger['part_log'] != "" %}
    <part_log>
        <database>{{ clickhouse_logger['part_log']['database'] }}</database>
        <table>{{ clickhouse_logger['part_log']['table'] }}</table>
        <flush_interval_milliseconds>{{ clickhouse_logger['part_log']['flush_interval_milliseconds'] }}</flush_interval_milliseconds>
    </part_log>
{% endif %}

    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.
         See https://clickhouse.yandex/reference_en.html#Internal%20dictionaries
    -->

    <!-- Path to file with region hierarchy. -->
    <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->

    <!-- Path to directory with files containing names of regions -->
    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->


    <!-- Configuration of external dictionaries. See:
         https://clickhouse.yandex/reference_en.html#External%20Dictionaries
    -->
    <dictionaries_config>*_dictionary.xml</dictionaries_config>

    <!-- Uncomment if you want data to be compressed 30-100% better.
         Don't do that if you just started using ClickHouse.
      -->
    <compression incl="clickhouse-compression">
    <!--
        <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->
        <case>

            <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->
            <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->
            <min_part_size_ratio>0.01</min_part_size_ratio>    <!- - Min size of part relative to whole table size. - ->

            <!- - What compression method to use. - ->
            <method>zstd</method>    <!- - Keep in mind that zstd compression library is highly experimental. - ->
        </case>
    -->
    </compression>

    <resharding>
        <task_queue_path>{{ clickhouse_zookeeper_config['resharding']['task_queue_path'] }}</task_queue_path>
    </resharding>

{% if clickhouse_zookeeper_config['distributed_ddl']['path'] is defined and clickhouse_zookeeper_config['distributed_ddl']['path'] != "" %}
    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
    <distributed_ddl>
        <!-- Path in ZooKeeper to queue with DDL queries -->
        <path>{{ clickhouse_zookeeper_config['distributed_ddl']['path'] }}</path>
    </distributed_ddl>
{% endif %}

    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->
    <!--
    <merge_tree>
        <max_suspicious_broken_parts>5</max_suspicious_broken_parts>
    </merge_tree>
    -->

    <!-- Protection from accidental DROP.
         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.
         If you want do delete one table and don't want to restart clickhouse-server, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.
         By default max_table_size_to_drop is 50GB, max_table_size_to_drop=0 allows to DROP any tables.
         Uncomment to disable protection.
    -->
    <max_table_size_to_drop>{{ clickhouse_server_config['max_table_size_to_drop'] | default('50000000000') }}</max_table_size_to_drop>

    <!-- Example of parameters for GraphiteMergeTree table engine -->
    <graphite_rollup_example>
        <pattern>
            <regexp>click_cost</regexp>
            <function>any</function>
            <retention>
                <age>0</age>
                <precision>3600</precision>
            </retention>
            <retention>
                <age>86400</age>
                <precision>60</precision>
            </retention>
        </pattern>
        <default>
            <function>max</function>
            <retention>
                <age>0</age>
                <precision>60</precision>
            </retention>
            <retention>
                <age>3600</age>
                <precision>300</precision>
            </retention>
            <retention>
                <age>86400</age>
                <precision>3600</precision>
            </retention>
        </default>
    </graphite_rollup_example>

  <format_schema_path>{{ clickhouse_default_main_dir }}/format_schemas/</format_schema_path>

</yandex>
